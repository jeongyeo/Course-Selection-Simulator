package univ;
/**
* Planner main class to init GUI
*
* @author  Jeongyeon Park
* @version 1.0
* @since   2018-11-27 
*/

import a2.*;
import java.util.ArrayList;
import javax.swing.*;
import static univ.GeneralDegree.rqrdNumberOfCredits;

public class Planner extends javax.swing.JFrame {
    private final String bcgReq = "CIS*1500,CIS*1910,CIS*2430,CIS*2500,CIS*2520,CIS*2750,CIS*2910,CIS*3530";
    private final String csReq = "CIS*1500,MATH*1200,CIS*1910,CIS*2500,CIS*2030,CIS*2430,CIS*2520,CIS*2910,CIS*2750,CIS*3110,CIS*3490,CIS*3150,CIS*3750,STAT*2040,CIS*3760,CIS*4650";
    private final String sengReq = "CIS*1250,CIS*1500,CIS*1910,CIS*2250,CIS*2500,CIS*2030,CIS*2430,CIS*2520,CIS*3250,CIS*2750,CIS*3110,CIS*3490,CIS*3750,STAT*2040,CIS*3760,CIS*3260,CIS*4150,CIS*4300,CIS*4250";
    
    private MyConnection c;
    private CourseCatalog cc;
    private Student student;
    private boolean loggedIn;
    /**
     * Creates new form GUI
     */
    public Planner() {
        this.c = new MyConnection();
        this.cc = new CourseCatalog();
        this.loggedIn = false;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane = new javax.swing.JTabbedPane();
        adminPanel = new javax.swing.JPanel();
        logPanel = new javax.swing.JPanel();
        logClearButton = new javax.swing.JButton();
        logScrollPane = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextPane();
        buttonPanel = new javax.swing.JPanel();
        courseButtonPanel = new javax.swing.JPanel();
        initCourseButton = new javax.swing.JButton();
        viewCourseButton = new javax.swing.JButton();
        addCourseButton = new javax.swing.JButton();
        removeCourseButton = new javax.swing.JButton();
        editCourseButton = new javax.swing.JButton();
        degreeButtonPanel = new javax.swing.JPanel();
        viewDegreeButton = new javax.swing.JButton();
        addDegreeButton = new javax.swing.JButton();
        removeDegreeButton = new javax.swing.JButton();
        editDegreeButton = new javax.swing.JButton();
        userPanel = new javax.swing.JPanel();
        serachCourseInfoPanel = new javax.swing.JPanel();
        courseInfoPanel = new javax.swing.JPanel();
        searchCourseInfoButton = new javax.swing.JButton();
        courseInfoPanel1 = new javax.swing.JPanel();
        courseCodeInfoLabel = new javax.swing.JLabel();
        courseCreditInfoLabel = new javax.swing.JLabel();
        courseTitleInfoLabel = new javax.swing.JLabel();
        courseSemesterOfferedInfoLabel = new javax.swing.JLabel();
        courseCodeInfo = new javax.swing.JLabel();
        courseCreditInfo = new javax.swing.JLabel();
        courseTitleInfo = new javax.swing.JLabel();
        courseSemesterOfferedInfo = new javax.swing.JLabel();
        coursePrereqInfoPanel = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        coursePrereqListInfo = new javax.swing.JTextPane();
        courseInfoList = new javax.swing.JComboBox<>();
        studentInfoPanel = new javax.swing.JPanel();
        studentInfoNameLabel = new javax.swing.JLabel();
        studentInfoIDLabel = new javax.swing.JLabel();
        studentInfoName = new javax.swing.JLabel();
        studentInfoID = new javax.swing.JLabel();
        studentInfoDegreeLabel = new javax.swing.JLabel();
        studentInfoMajorLabel = new javax.swing.JLabel();
        studentInfoDegree = new javax.swing.JLabel();
        studentInfoMajor = new javax.swing.JLabel();
        studentStudentPanel = new javax.swing.JPanel();
        studentSelectDegreeButton = new javax.swing.JButton();
        studentSelectMajorButton = new javax.swing.JButton();
        studentChangeAccountButton = new javax.swing.JButton();
        studentPOSPanel = new javax.swing.JPanel();
        posViewMyPOSButton = new javax.swing.JButton();
        posAddCourseButton = new javax.swing.JButton();
        posRemoveCourseButton = new javax.swing.JButton();
        studentTranscriptPanel = new javax.swing.JPanel();
        transcriptViewTranscriptButton = new javax.swing.JButton();
        transcriptAddCourseButton = new javax.swing.JButton();
        transcriptChangeGradeButton = new javax.swing.JButton();
        transcriptRemoveCourseButton = new javax.swing.JButton();
        studentUtilitiesPanel = new javax.swing.JPanel();
        utilitiesOptionList = new javax.swing.JComboBox<>();
        utilitiesSubmitButton = new javax.swing.JButton();
        studentGPAPanel = new javax.swing.JPanel();
        gpaViewOverallGPAButton = new javax.swing.JButton();
        gpaViewCISGPAButton = new javax.swing.JButton();
        gpaView10GPAButton = new javax.swing.JButton();
        studentSavePanel = new javax.swing.JPanel();
        studentSavePOSAndTranscriptButton = new javax.swing.JButton();
        readmePanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Assignment 2 GUI");
        setMinimumSize(new java.awt.Dimension(1300, 700));
        setSize(new java.awt.Dimension(1300, 700));

        jTabbedPane.setPreferredSize(new java.awt.Dimension(1000, 500));
        jTabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTabbedPaneMouseReleased(evt);
            }
        });

        adminPanel.setPreferredSize(new java.awt.Dimension(1000, 500));

        logClearButton.setText("Clear");
        logClearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logClearButtonActionPerformed(evt);
            }
        });

        textArea.setEditable(false);
        logScrollPane.setViewportView(textArea);

        javax.swing.GroupLayout logPanelLayout = new javax.swing.GroupLayout(logPanel);
        logPanel.setLayout(logPanelLayout);
        logPanelLayout.setHorizontalGroup(
            logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(logScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 414, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(logPanelLayout.createSequentialGroup()
                .addGap(176, 176, 176)
                .addComponent(logClearButton))
        );
        logPanelLayout.setVerticalGroup(
            logPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(logPanelLayout.createSequentialGroup()
                .addComponent(logScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(logClearButton)
                .addContainerGap())
        );

        courseButtonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Course Buttons"));
        courseButtonPanel.setLayout(new java.awt.GridBagLayout());

        initCourseButton.setText("Initialize file to database");
        initCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                initCourseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 12, 0, 0);
        courseButtonPanel.add(initCourseButton, gridBagConstraints);

        viewCourseButton.setText("View current course database");
        viewCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewCourseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 12, 0, 0);
        courseButtonPanel.add(viewCourseButton, gridBagConstraints);

        addCourseButton.setText("Add new course to database");
        addCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCourseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 12, 0, 0);
        courseButtonPanel.add(addCourseButton, gridBagConstraints);

        removeCourseButton.setText("Remove course from database");
        removeCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeCourseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 12, 0, 0);
        courseButtonPanel.add(removeCourseButton, gridBagConstraints);

        editCourseButton.setText("Edit course from database");
        editCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editCourseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 12, 0, 0);
        courseButtonPanel.add(editCourseButton, gridBagConstraints);

        degreeButtonPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Degree Buttons"));
        degreeButtonPanel.setLayout(new java.awt.GridBagLayout());

        viewDegreeButton.setText("View current list of degrees");
        viewDegreeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewDegreeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 12, 0, 0);
        degreeButtonPanel.add(viewDegreeButton, gridBagConstraints);

        addDegreeButton.setText("Add new degree");
        addDegreeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDegreeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 12, 0, 0);
        degreeButtonPanel.add(addDegreeButton, gridBagConstraints);

        removeDegreeButton.setText("Remove degree");
        removeDegreeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDegreeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 12, 0, 0);
        degreeButtonPanel.add(removeDegreeButton, gridBagConstraints);

        editDegreeButton.setText("Edit degree");
        editDegreeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editDegreeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 12, 0, 0);
        degreeButtonPanel.add(editDegreeButton, gridBagConstraints);

        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);
        buttonPanel.setLayout(buttonPanelLayout);
        buttonPanelLayout.setHorizontalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(degreeButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(courseButtonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        buttonPanelLayout.setVerticalGroup(
            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(buttonPanelLayout.createSequentialGroup()
                .addComponent(courseButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(degreeButtonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout adminPanelLayout = new javax.swing.GroupLayout(adminPanel);
        adminPanel.setLayout(adminPanelLayout);
        adminPanelLayout.setHorizontalGroup(
            adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(adminPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(logPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        adminPanelLayout.setVerticalGroup(
            adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, adminPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(adminPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(adminPanelLayout.createSequentialGroup()
                        .addComponent(logPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 179, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jTabbedPane.addTab("Program Administrator", null, adminPanel, "");
        adminPanel.getAccessibleContext().setAccessibleName("");
        adminPanel.getAccessibleContext().setAccessibleDescription("");

        userPanel.setPreferredSize(new java.awt.Dimension(1000, 600));

        serachCourseInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Search Course Information"));

        searchCourseInfoButton.setText("Submit");
        searchCourseInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchCourseInfoButtonActionPerformed(evt);
            }
        });

        courseInfoPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Course Information"));

        courseCodeInfoLabel.setText("Course Code: ");

        courseCreditInfoLabel.setText("Credit: ");

        courseTitleInfoLabel.setText("Title: ");

        courseSemesterOfferedInfoLabel.setText("Semester Offered: ");

        coursePrereqInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Course Prerequisites"));

        coursePrereqListInfo.setEditable(false);
        jScrollPane3.setViewportView(coursePrereqListInfo);

        javax.swing.GroupLayout coursePrereqInfoPanelLayout = new javax.swing.GroupLayout(coursePrereqInfoPanel);
        coursePrereqInfoPanel.setLayout(coursePrereqInfoPanelLayout);
        coursePrereqInfoPanelLayout.setHorizontalGroup(
            coursePrereqInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );
        coursePrereqInfoPanelLayout.setVerticalGroup(
            coursePrereqInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 219, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout courseInfoPanel1Layout = new javax.swing.GroupLayout(courseInfoPanel1);
        courseInfoPanel1.setLayout(courseInfoPanel1Layout);
        courseInfoPanel1Layout.setHorizontalGroup(
            courseInfoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(courseInfoPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(courseInfoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(coursePrereqInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(courseInfoPanel1Layout.createSequentialGroup()
                        .addGroup(courseInfoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(courseCodeInfoLabel)
                            .addComponent(courseCreditInfoLabel)
                            .addComponent(courseTitleInfoLabel)
                            .addComponent(courseSemesterOfferedInfoLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(courseInfoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(courseCodeInfo, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(courseCreditInfo, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(courseTitleInfo, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(courseSemesterOfferedInfo, javax.swing.GroupLayout.Alignment.TRAILING))))
                .addContainerGap())
        );
        courseInfoPanel1Layout.setVerticalGroup(
            courseInfoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(courseInfoPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(courseInfoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(courseCodeInfoLabel)
                    .addComponent(courseCodeInfo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(courseInfoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(courseCreditInfoLabel)
                    .addComponent(courseCreditInfo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(courseInfoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(courseTitleInfoLabel)
                    .addComponent(courseTitleInfo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(courseInfoPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(courseSemesterOfferedInfoLabel)
                    .addComponent(courseSemesterOfferedInfo))
                .addGap(18, 18, 18)
                .addComponent(coursePrereqInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        courseInfoList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Course Code" }));

        javax.swing.GroupLayout courseInfoPanelLayout = new javax.swing.GroupLayout(courseInfoPanel);
        courseInfoPanel.setLayout(courseInfoPanelLayout);
        courseInfoPanelLayout.setHorizontalGroup(
            courseInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(courseInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(courseInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(courseInfoPanelLayout.createSequentialGroup()
                        .addComponent(courseInfoList, 0, 333, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchCourseInfoButton))
                    .addComponent(courseInfoPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        courseInfoPanelLayout.setVerticalGroup(
            courseInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(courseInfoPanelLayout.createSequentialGroup()
                .addGroup(courseInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(courseInfoList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchCourseInfoButton))
                .addGap(7, 7, 7)
                .addComponent(courseInfoPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout serachCourseInfoPanelLayout = new javax.swing.GroupLayout(serachCourseInfoPanel);
        serachCourseInfoPanel.setLayout(serachCourseInfoPanelLayout);
        serachCourseInfoPanelLayout.setHorizontalGroup(
            serachCourseInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(serachCourseInfoPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(courseInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        serachCourseInfoPanelLayout.setVerticalGroup(
            serachCourseInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(courseInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        studentInfoPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Student Information"));

        studentInfoNameLabel.setText("Name: ");

        studentInfoIDLabel.setText("ID:");

        studentInfoDegreeLabel.setText("Degree:");
        studentInfoDegreeLabel.setAutoscrolls(true);

        studentInfoMajorLabel.setText("Major:");

        javax.swing.GroupLayout studentInfoPanelLayout = new javax.swing.GroupLayout(studentInfoPanel);
        studentInfoPanel.setLayout(studentInfoPanelLayout);
        studentInfoPanelLayout.setHorizontalGroup(
            studentInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentInfoPanelLayout.createSequentialGroup()
                .addGroup(studentInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(studentInfoPanelLayout.createSequentialGroup()
                        .addComponent(studentInfoNameLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(studentInfoName))
                    .addGroup(studentInfoPanelLayout.createSequentialGroup()
                        .addComponent(studentInfoIDLabel)
                        .addGap(112, 112, 112)
                        .addComponent(studentInfoID)))
                .addGap(30, 30, 30)
                .addGroup(studentInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(studentInfoPanelLayout.createSequentialGroup()
                        .addComponent(studentInfoDegreeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(studentInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(studentInfoDegree, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(studentInfoMajor, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(studentInfoPanelLayout.createSequentialGroup()
                        .addComponent(studentInfoMajorLabel)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        studentInfoPanelLayout.setVerticalGroup(
            studentInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(studentInfoPanelLayout.createSequentialGroup()
                .addGroup(studentInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(studentInfoPanelLayout.createSequentialGroup()
                        .addGroup(studentInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(studentInfoNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(studentInfoDegreeLabel)
                            .addComponent(studentInfoName))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(studentInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(studentInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(studentInfoIDLabel)
                                .addComponent(studentInfoID)
                                .addComponent(studentInfoMajorLabel))
                            .addComponent(studentInfoMajor)))
                    .addComponent(studentInfoDegree))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        studentStudentPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Student"));

        studentSelectDegreeButton.setText("Select Degree");
        studentSelectDegreeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentSelectDegreeButtonActionPerformed(evt);
            }
        });
        studentStudentPanel.add(studentSelectDegreeButton);

        studentSelectMajorButton.setText("Select Major From Degree");
        studentSelectMajorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentSelectMajorButtonActionPerformed(evt);
            }
        });
        studentStudentPanel.add(studentSelectMajorButton);

        studentChangeAccountButton.setText("Change Account");
        studentChangeAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentChangeAccountButtonActionPerformed(evt);
            }
        });
        studentStudentPanel.add(studentChangeAccountButton);

        studentPOSPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Plan Of Study"));

        posViewMyPOSButton.setText("View My POS");
        posViewMyPOSButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posViewMyPOSButtonActionPerformed(evt);
            }
        });
        studentPOSPanel.add(posViewMyPOSButton);

        posAddCourseButton.setText("Add Course");
        posAddCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posAddCourseButtonActionPerformed(evt);
            }
        });
        studentPOSPanel.add(posAddCourseButton);

        posRemoveCourseButton.setText("Remove Course");
        posRemoveCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                posRemoveCourseButtonActionPerformed(evt);
            }
        });
        studentPOSPanel.add(posRemoveCourseButton);

        studentTranscriptPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Transcript"));

        transcriptViewTranscriptButton.setText("View Transcript");
        transcriptViewTranscriptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transcriptViewTranscriptButtonActionPerformed(evt);
            }
        });
        studentTranscriptPanel.add(transcriptViewTranscriptButton);

        transcriptAddCourseButton.setText("Add Course");
        transcriptAddCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transcriptAddCourseButtonActionPerformed(evt);
            }
        });
        studentTranscriptPanel.add(transcriptAddCourseButton);

        transcriptChangeGradeButton.setText("Change Grade");
        transcriptChangeGradeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transcriptChangeGradeButtonActionPerformed(evt);
            }
        });
        studentTranscriptPanel.add(transcriptChangeGradeButton);

        transcriptRemoveCourseButton.setText("Remove Course");
        transcriptRemoveCourseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transcriptRemoveCourseButtonActionPerformed(evt);
            }
        });
        studentTranscriptPanel.add(transcriptRemoveCourseButton);

        studentUtilitiesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Utilities"));

        utilitiesOptionList.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "View Options" }));
        studentUtilitiesPanel.add(utilitiesOptionList);

        utilitiesSubmitButton.setText("Submit");
        utilitiesSubmitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                utilitiesSubmitButtonActionPerformed(evt);
            }
        });
        studentUtilitiesPanel.add(utilitiesSubmitButton);

        studentGPAPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("GPA"));

        gpaViewOverallGPAButton.setText("View Overall GPA");
        gpaViewOverallGPAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gpaViewOverallGPAButtonActionPerformed(evt);
            }
        });
        studentGPAPanel.add(gpaViewOverallGPAButton);

        gpaViewCISGPAButton.setText("View CIS GPA");
        gpaViewCISGPAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gpaViewCISGPAButtonActionPerformed(evt);
            }
        });
        studentGPAPanel.add(gpaViewCISGPAButton);

        gpaView10GPAButton.setText("View 10 Most Recent GPA ");
        gpaView10GPAButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gpaView10GPAButtonActionPerformed(evt);
            }
        });
        studentGPAPanel.add(gpaView10GPAButton);

        studentSavePanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Save"));

        studentSavePOSAndTranscriptButton.setText("Save Plan Of Study and Transcript");
        studentSavePOSAndTranscriptButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                studentSavePOSAndTranscriptButtonActionPerformed(evt);
            }
        });
        studentSavePanel.add(studentSavePOSAndTranscriptButton);

        javax.swing.GroupLayout userPanelLayout = new javax.swing.GroupLayout(userPanel);
        userPanel.setLayout(userPanelLayout);
        userPanelLayout.setHorizontalGroup(
            userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(studentInfoPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(studentStudentPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(studentPOSPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(studentTranscriptPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(studentUtilitiesPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(studentGPAPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(studentSavePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(serachCourseInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        userPanelLayout.setVerticalGroup(
            userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(userPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(userPanelLayout.createSequentialGroup()
                        .addComponent(studentInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(studentStudentPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(studentPOSPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(studentTranscriptPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(studentUtilitiesPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(studentGPAPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(studentSavePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(serachCourseInfoPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("Student", userPanel);

        javax.swing.GroupLayout readmePanelLayout = new javax.swing.GroupLayout(readmePanel);
        readmePanel.setLayout(readmePanelLayout);
        readmePanelLayout.setHorizontalGroup(
            readmePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        readmePanelLayout.setVerticalGroup(
            readmePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jTabbedPane.addTab("readme", readmePanel);

        jMenu1.setText("Menu");

        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(exitMenuItem);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    //init for student tab
    private void jTabbedPaneMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPaneMouseReleased
        if(jTabbedPane.getSelectedIndex() == 1){
            cc.initializeCatalog(); //init cc
            ArrayList<Course> courseList = cc.getCourseCatalog();
            String[] courseTitleList = new String[courseList.size()];
            for(int i = 0; i < courseList.size(); i++){
                courseTitleList[i] = courseList.get(i).getCourseCode();
            }
            DefaultComboBoxModel model = new DefaultComboBoxModel(courseTitleList);
            courseInfoList.setModel(model); //init combobox
            
            String[] utilitiesList = new String[] {"View a list of *required* courses for my degree and major that are *not* represented in my plan of study nor my transcript",
                                                   "View a list of *required* courses that are *not* represented in my transcript",
                                                   "View the number of credits I must add to my plan of study in order to have a plan that allows me to complete my degree",
                                                   "View a list of prerequisite courses that I must take in order to take the courses currently in my plan of study",
                                                   "View the number of credits I have completed in my program",
                                                   "View the number of credits I have remaining to complete my program",
                                                   "Determine if I have met the completion requirements of my chosen degree"};
            DefaultComboBoxModel model1 = new DefaultComboBoxModel(utilitiesList);
            utilitiesOptionList.setModel(model1); //init combobox
            logInCheck();
        }
    }//GEN-LAST:event_jTabbedPaneMouseReleased

    private void gpaViewOverallGPAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gpaViewOverallGPAButtonActionPerformed
        ArrayList<Attempt> transcript = student.getFullAttempts();
        Double gpa = 0.0;
        int numOfAttempts = 0;
        for(Attempt a : transcript){
            if("Completed".equals(a.getStatus())){
                gpa += Double.parseDouble(a.getAttemptGrade());
                numOfAttempts++;
            }
        }
        gpa = gpa/numOfAttempts;
        JOptionPane.showMessageDialog(null, "Your overall GPA is: " + String.format("%.2f", gpa), "Overall GPA", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_gpaViewOverallGPAButtonActionPerformed

    private void transcriptRemoveCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transcriptRemoveCourseButtonActionPerformed
        ArrayList<Attempt> transcript = student.getFullAttempts();
        String[] courseList = new String[transcript.size()];
        int i = 0, j = 0;
        for(Attempt a : transcript){
            courseList[i] = a.getCourseAttempted().getCourseCode();
            i++;
        }
        JComboBox cb = new JComboBox(courseList);
        JTextField semester = new JTextField();
        Object[] message = {"Course delete", cb};
        int option = JOptionPane.showConfirmDialog(null, message, "Delete attempt in Transcript", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if(option == JOptionPane.OK_OPTION){
            String temp = new String();
            for(Attempt a : transcript){
                if(a.getCourseAttempted().getCourseCode().equals((String)cb.getSelectedItem())){
                    temp += a.getSemesterTaken() + ",";
                }
            }
            String[] semList = temp.split(",");
            JComboBox cb1 = new JComboBox(semList);
            Object[] message1 = {"Semester taken", cb1};
            int option1 = JOptionPane.showConfirmDialog(null, message1, "Delete attempt in Transcript", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
            if(option1 == JOptionPane.OK_OPTION){
                student.removeAttempt((String)cb.getSelectedItem(), (String)cb1.getSelectedItem());
                JOptionPane.showMessageDialog(null, "Course removed", "Notice", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_transcriptRemoveCourseButtonActionPerformed

    private void transcriptViewTranscriptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transcriptViewTranscriptButtonActionPerformed
        ArrayList<Attempt> data = student.getFullAttempts();
        ArrayList<String> attemptList = new ArrayList<>();
        for(Attempt a : data){
            attemptList.add(a.getCourseAttempted().getCourseCode() + ", " + a.getSemesterTaken() + ", " + a.getAttemptGrade() + ", " + a.getStatus());
        }
        JFrame j = new JFrame();
        j.setLocationRelativeTo(null);
        j.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        j.setTitle("Course list");
        j.add(new JScrollPane(makeStudentJTable(attemptList)));
        j.pack();
        j.setVisible(true);
    }//GEN-LAST:event_transcriptViewTranscriptButtonActionPerformed

    private void posViewMyPOSButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posViewMyPOSButtonActionPerformed
        ArrayList<Course> data = student.getFullPlanOfStudy();
        ArrayList<String> courseList = new ArrayList<>();
        for(Course c : data){
            ArrayList<Course> prereqs = c.getPrerequisites();
            String prereqList = "";
            for(int i = 0; i < prereqs.size(); i++){
                prereqList += prereqs.get(i).getCourseCode();
                if(i != prereqs.size() - 1){
                    prereqList += ":";
                }
            }
            courseList.add((c.getCourseCode() + ", " + Double.toString(c.getCourseCredit()) + ", " + c.getCourseTitle() + ", " + c.getSemesterOffered() + ", " + prereqList));
        }
        JFrame j = new JFrame();
        j.setLocationRelativeTo(null);
        j.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        j.setTitle("Course list");
        j.add(new JScrollPane(makeCourseJTable(courseList)));
        j.pack();
        j.setVisible(true);
    }//GEN-LAST:event_posViewMyPOSButtonActionPerformed

    private void studentSelectDegreeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentSelectDegreeButtonActionPerformed
        JComboBox cb = new JComboBox(new String[] {"Bachelor of Computing: General Degree", "Bachelor of Computing: Honours Degree"});
        Object[] message = {"Select degree: ", cb};
        int option = JOptionPane.showConfirmDialog(this, message, "Select Degree", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if(option == JOptionPane.OK_OPTION){
            Degree degree;
            switch((String) cb.getSelectedItem()){
                case "Bachelor of Computing: General Degree":
                    studentInfoDegree.setText((String) cb.getSelectedItem());
                    studentInfoMajor.setText("BCG");
                    degree = initBCG();
                    degree.setDegreeTitle("BCG");
                    student.setDegree(degree);
                    break;
                case "Bachelor of Computing: Honours Degree":
                    studentInfoDegree.setText((String) cb.getSelectedItem());
                    studentInfoMajor.setText("");
                    break;
                default:
                    break;
            }
        }
    }//GEN-LAST:event_studentSelectDegreeButtonActionPerformed

    private void searchCourseInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchCourseInfoButtonActionPerformed
        String courseCode = (String) courseInfoList.getSelectedItem();
        Course temp = cc.findCourse(courseCode);
        courseCodeInfo.setText(temp.getCourseCode());
        courseCreditInfo.setText(String.valueOf(temp.getCourseCredit()));
        courseTitleInfo.setText(temp.getCourseTitle());
        courseSemesterOfferedInfo.setText(temp.getSemesterOffered());
        ArrayList<Course> tempPrereqs = temp.getPrerequisites();
        String prereq = new String();
        for(Course course : tempPrereqs){
            prereq = prereq.concat(course.getCourseCode() + " " + course.getCourseTitle() +"\n");
        }
        coursePrereqListInfo.setText(prereq);
    }//GEN-LAST:event_searchCourseInfoButtonActionPerformed

    private void editDegreeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editDegreeButtonActionPerformed
        String[] degreeList = {"Bachelor of Computing: General Degree",
            "Bachelor of Computing: Honours Degree"};
        JComboBox cb = new JComboBox(degreeList);
        Object[] message = {"Select degree to edit: ", cb};
        int option = JOptionPane.showConfirmDialog(this, message, "Edit degree", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        String degreeName = (String) cb.getSelectedItem();
        if(degreeName != null && option == JOptionPane.OK_OPTION){
            ArrayList<String> courses = c.getAllCourses();
            String[] courseList = new String[courses.size()];
            int i = 0;
            for(String s : courses){
                String[] temp = s.split(",");
                courseList[i] = temp[0];
                i++;
            }
            JTextField title = new JTextField(degreeName);
            JList jl = new JList(courseList);
            Object[] message1 = {"Title: ", title,
                "Select list of required courses: ", jl,};
            JOptionPane.showConfirmDialog(this, message1, "DOES NOT DO ANYTHING: Add degree", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_editDegreeButtonActionPerformed

    private void removeDegreeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDegreeButtonActionPerformed
        String[] degreeList = {"Bachelor of Computing: General Degree",
            "Bachelor of Computing: Honours Degree"};
        JComboBox cb = new JComboBox(degreeList);
        Object[] message = {"Select degree to delete: ", cb};
        JOptionPane.showConfirmDialog(this, message, "Remove degree", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        String degreeName = (String) cb.getSelectedItem();
        if(c.findCourse(degreeName) != null){
            updateTextArea("Deleted " + degreeName + "\n");
        }
    }//GEN-LAST:event_removeDegreeButtonActionPerformed

    private void addDegreeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDegreeButtonActionPerformed
        ArrayList<String> courses = c.getAllCourses();
        String[] courseList = new String[courses.size()];
        int i = 0;
        for(String s : courses){
            String[] temp = s.split(",");
            courseList[i] = temp[0];
            i++;
        }
        JTextField title = new JTextField();
        JList jl = new JList(courseList);
        Object[] message = {"Title: ", title,
            "Select list of required courses: ", jl,};
        int option = JOptionPane.showConfirmDialog(this, message, "DOES NOT DO ANYTHING: Add degree", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if(option == JOptionPane.OK_OPTION){
            updateTextArea("Degree " + title.getText() + " added\n");
        }
    }//GEN-LAST:event_addDegreeButtonActionPerformed

    private void viewDegreeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewDegreeButtonActionPerformed
        JOptionPane.showMessageDialog(null, "HARD CODED:\nBCG\nCS\nSEENG", "Degrees", JOptionPane.DEFAULT_OPTION);
    }//GEN-LAST:event_viewDegreeButtonActionPerformed

    private void editCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editCourseButtonActionPerformed
        ArrayList<String> courses = c.getAllCourses();
        String[] courseList = new String[courses.size()];
        int i = 0;
        for(String s : courses){
            String[] temp = s.split(",");
            courseList[i] = temp[0];
            i++;
        }
        JComboBox cb = new JComboBox(courseList);
        Object[] message = {"Select course to edit: ", cb};
        int option = JOptionPane.showConfirmDialog(this, message, "Edit course", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if(option == JOptionPane.OK_OPTION){
            String courseCode = (String) cb.getSelectedItem();
            String course = c.findCourse(courseCode);
            String[] list = course.split(",");
            JTextField code = new JTextField(list[0]);
            JTextField credit = new JTextField(list[1]);
            JTextField name = new JTextField(list[2]);
            JTextField semester = new JTextField(list[3]);
            JTextField prereq;
            if(list.length == 5){
                prereq = new JTextField(list[4]);
            }
            else{
                prereq = new JTextField();
            }
            Object[] message1 = {"Code: ", code,
                "Credit: ", credit,
                "Name: ", name,
                "Semester: ", semester,
                "Prereq: ", prereq,};
            int option2 = JOptionPane.showConfirmDialog(this, message1, "Edit course", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
            if(option2 == JOptionPane.OK_OPTION){
                if(!code.getText().isEmpty() && !credit.getText().isEmpty() && !name.getText().isEmpty() && !semester.getText().isEmpty()){
                    c.deleteCourse(courseCode);
                    c.addCourse(code.getText(), credit.getText(), name.getText(), semester.getText(), prereq.getText());
                    updateTextArea("Updated course to: " + code.getText() + ", " + credit.getText() + ", " + name.getText() + ", " + semester.getText() + ", " + prereq.getText() + "\n");
                }
                else{
                    updateTextArea("Failed to update course\n");
                }
            }
        }
    }//GEN-LAST:event_editCourseButtonActionPerformed

    private void removeCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeCourseButtonActionPerformed
        ArrayList<String> courses = c.getAllCourses();
        String[] courseList = new String[courses.size()];
        int i = 0;
        for(String s : courses){
            String[] temp = s.split(",");
            courseList[i] = temp[0];
            i++;
        }
        JComboBox cb = new JComboBox(courseList);
        Object[] message = {"Select course to delete: ", cb};
        JOptionPane.showConfirmDialog(null, message, "Delete course", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        String courseCode = (String) cb.getSelectedItem();
        if(c.findCourse(courseCode) == null){
            updateTextArea("Could not find course " + courseCode + "\n");
        }
        else{
            c.deleteCourse(courseCode);
            updateTextArea("Deleted course " + courseCode + "\n");
        }
    }//GEN-LAST:event_removeCourseButtonActionPerformed

    private void addCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCourseButtonActionPerformed
        JTextField code = new JTextField();
        JTextField credit = new JTextField();
        JTextField name = new JTextField();
        JTextField semester = new JTextField();
        JTextField prereq = new JTextField();
        Object[] message = {"Code: ", code,
            "Credit: ", credit,
            "Name: ", name,
            "Semester: ", semester,
            "Prereq: ", prereq,};
        int option = JOptionPane.showConfirmDialog(null, message, "Add new course", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if(option == JOptionPane.OK_OPTION){
            if(!code.getText().isEmpty() && !credit.getText().isEmpty() && !name.getText().isEmpty() && !semester.getText().isEmpty()){
                c.addCourse(code.getText(), credit.getText(), name.getText(), semester.getText(), prereq.getText());
                updateTextArea("Added new course: " + code.getText() + ", " + credit.getText() + ", " + name.getText() + ", " + semester.getText() + ", " + prereq.getText() + "\n");
            }
            else{
                updateTextArea("Failed to add course\n");
            }
        }
    }//GEN-LAST:event_addCourseButtonActionPerformed

    private void viewCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewCourseButtonActionPerformed
        updateTextArea("Viewing current course database...\n");
        JFrame j = new JFrame();
        j.setLocationRelativeTo(null);
        j.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        j.setTitle("Course list");
        j.add(new JScrollPane(makeCourseJTable(c.getAllCourses())));
        j.pack();
        j.setVisible(true);
    }//GEN-LAST:event_viewCourseButtonActionPerformed

    private void initCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_initCourseButtonActionPerformed
        updateTextArea("Uploading courses from file to database...\n");
        String fileName = (String) JOptionPane.showInputDialog(null, "Warning: Wipes pre-existing data\nCurrent directory: " + System.getProperty("user.dir") + " \nEnter name of the file to load: ", "Initalize database", JOptionPane.PLAIN_MESSAGE, null, null, "courselistA2.txt");
        if(fileName != null){
            PrepStudentScript initTables = new PrepStudentScript(true);
            c.deleteAllSavedStudent();
            c.repopulateCourses(fileName);
            updateTextArea("DonPrepStudentScripte!\n");
        }
        else{
            updateTextArea("Cancelled\n");
        }
    }//GEN-LAST:event_initCourseButtonActionPerformed

    private void logClearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logClearButtonActionPerformed
        textArea.setText("");
    }//GEN-LAST:event_logClearButtonActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void studentChangeAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentChangeAccountButtonActionPerformed
        loggedIn = false;
        logInCheck();
    }//GEN-LAST:event_studentChangeAccountButtonActionPerformed

    private void studentSavePOSAndTranscriptButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentSavePOSAndTranscriptButtonActionPerformed
        ArrayList<String> c1 = new ArrayList<>();
        ArrayList<Course> pos = student.getFullPlanOfStudy();
        ArrayList<Attempt> transcript = student.getFullAttempts();
        for(Course c : pos){
            ArrayList<Course> prereqs = c.getPrerequisites();
            String prereqList = "";
            for(int i = 0; i < prereqs.size(); i++){
                prereqList += prereqs.get(i).getCourseCode();
                if(i != prereqs.size() - 1){
                    prereqList += ":";
                }
            }
            c1.add(c.getCourseCode() + "," + Double.toString(c.getCourseCredit()) + "," + c.getCourseTitle() + "," + c.getSemesterOffered() + "," + prereqList);
        }
        for(Attempt a : transcript){
            c1.add(a.getCourseAttempted().getCourseCode() + "," + a.getSemesterTaken() + "," + a.getAttemptGrade() + "," + a.getStatus());
        }
        DBStudent s = new DBStudent(student.getStudentNumber().toString(), student.getFullName(), student.getDegree().title, c1);
        c.deleteSavedStudent(student.getStudentNumber().toString(), student.getFullName());
        c.saveStudent(s);
        JOptionPane.showMessageDialog(null, "Plan of Study and Transcript saved", "Notice", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_studentSavePOSAndTranscriptButtonActionPerformed

    private void studentSelectMajorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_studentSelectMajorButtonActionPerformed
        String degreeName = studentInfoDegree.getText();
        String[] majorList = null;
        if("Bachelor of Computing: General Degree".equals(degreeName)){
            majorList = new String[] {"BCG"};
        }
        else if("Bachelor of Computing: Honours Degree".equals(degreeName)){
            majorList = new String[] {"CS", "SENG"};
        }
        JComboBox jcb = new JComboBox();
        jcb.setModel(new DefaultComboBoxModel(majorList));
        Object[] message = {"Select Major:", jcb};
        int option = JOptionPane.showConfirmDialog(this, message, "Select Major", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if(option == JOptionPane.OK_OPTION){
            Degree degree = null;
            switch((String) jcb.getSelectedItem()){
                case "BCG":
                    degree = initBCG();
                    degree.setDegreeTitle("BCG");
                    student.setDegree(degree);
                    studentInfoMajor.setText("BCG");
                    break;
                case "CS":
                    degree = initCS();
                    degree.setDegreeTitle("CS");
                    student.setDegree(degree);
                    studentInfoMajor.setText("CS");
                    break;
                case"SENG":
                    degree = initSENG();
                    degree.setDegreeTitle("SENG");
                    student.setDegree(degree);
                    studentInfoMajor.setText("SENG");
                    break;
                default:
                    System.out.println("ERROR: No suitable method to set selected degree");
                    break;
            }
        }
        
    }//GEN-LAST:event_studentSelectMajorButtonActionPerformed

    private void posAddCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posAddCourseButtonActionPerformed
        ArrayList<Course> courses = cc.getCourseCatalog();
        String[] courseList = new String[courses.size()];
        int i = 0;
        for(Course c : courses){
            courseList[i] = c.getCourseCode();
            i++;
        }
        JComboBox cb = new JComboBox(courseList);
        JTextField semester = new JTextField();
        Object[] message = {"Code: ", cb,
            "Semester planned to take: ", semester,};
        int option = JOptionPane.showConfirmDialog(null, message, "Add New Course to Plan of Study", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if(option == JOptionPane.OK_OPTION && !semester.getText().isEmpty()){
            Course temp = new Course(cc.findCourse((String)cb.getSelectedItem()));
            char sem = semester.getText().charAt(0);
            if('B' == temp.getSemesterOffered().charAt(0) || sem == temp.getSemesterOffered().charAt(0)){
                temp.setSemesterOffered(semester.getText());
                student.addCourse(temp);
                JOptionPane.showMessageDialog(null, "Course added", "Notice", JOptionPane.INFORMATION_MESSAGE);
            }
            else{
                JOptionPane.showMessageDialog(null, "Course not offered at that semester", "Warning", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_posAddCourseButtonActionPerformed

    private void posRemoveCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_posRemoveCourseButtonActionPerformed
        ArrayList<Course> pos = student.getFullPlanOfStudy();
        String[] courseList = new String[pos.size()];
        int i = 0;
        for(Course c : pos){
            courseList[i] = c.getCourseCode();
            i++;
        }
        JComboBox cb = new JComboBox(courseList);
        Object[] message = {"Course to remove: ", cb};
        int option = JOptionPane.showConfirmDialog(null, message, "Remove course from Plan of Study", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if(option == JOptionPane.OK_OPTION){
            student.removeCourse((String)cb.getSelectedItem());
            JOptionPane.showMessageDialog(null, "Course removed", "Notice", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_posRemoveCourseButtonActionPerformed

    private void transcriptAddCourseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transcriptAddCourseButtonActionPerformed
        ArrayList<Course> pos = student.getFullPlanOfStudy();
        String[] courseList = new String[pos.size()];
        int i = 0;
        for(Course c : pos){
            courseList[i] = c.getCourseCode() + " " + c.getSemesterOffered();
            i++;
        }
        JComboBox cb = new JComboBox(courseList);
        JTextField grade = new JTextField();
        JComboBox cb1 = new JComboBox(new String[] {"Completed", "InProgress"});
        Object[] message = {"Course to add: ", cb, "Grade: ", grade, "Status:", cb1};
        int option = JOptionPane.showConfirmDialog(null, message, "Add course to Transcript", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if(option == JOptionPane.OK_OPTION){
            String courseCode = (String)cb.getSelectedItem();
            String[] parts = courseCode.split(" ");
            Attempt temp = new Attempt();
            temp.setCourseAttempted(student.findCourse(parts[0]));
            temp.setSemesterTaken(student.findCourse(parts[0]).getSemesterOffered());
            temp.setAttemptGrade(grade.getText());
            temp.setStatus((String)cb1.getSelectedItem());
            student.addAttempt(temp);
            JOptionPane.showMessageDialog(null, "Course added", "Notice", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_transcriptAddCourseButtonActionPerformed

    private void transcriptChangeGradeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transcriptChangeGradeButtonActionPerformed
        ArrayList<Attempt> pos = student.getFullAttempts();
        String[] courseList = new String[pos.size()];
        int i = 0;
        for(Attempt a : pos){
            courseList[i] = a.getCourseAttempted().getCourseCode() + " " + a.getSemesterTaken();
            i++;
        }
        JComboBox cb = new JComboBox(courseList);
        Object[] message = {"Course to change grade: ", cb};
        int option = JOptionPane.showConfirmDialog(null, message, "Change grade in Transcript", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if(option == JOptionPane.OK_OPTION){
            String selectedItem = (String)cb.getSelectedItem();
            String[] parts = selectedItem.split(" ");
            Attempt temp = student.findAttempt(parts[0], parts[1]);
            if(temp != null){
                JTextField grade = new JTextField();
                Object[] message1 = {"Enter new grade: ", grade};
                int option1 = JOptionPane.showConfirmDialog(null, message1, "Change grade in Transcript", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
                if(option1 == JOptionPane.OK_OPTION){
                    temp.setAttemptGrade(grade.getText());
                    JOptionPane.showMessageDialog(null, "Grade updated", "Notice", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_transcriptChangeGradeButtonActionPerformed

    private void gpaViewCISGPAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gpaViewCISGPAButtonActionPerformed
        ArrayList<Attempt> transcript = student.getFullAttempts();
        Double gpa = 0.0;
        int numOfAttempts = 0;
        for(Attempt a : transcript){
            String coursePrefix = a.getCourseAttempted().getCourseCode().substring(0, Math.min(a.getCourseAttempted().getCourseCode().length(), 3));
            if("CIS".equals(coursePrefix)){
                gpa += Double.parseDouble(a.getAttemptGrade());
                numOfAttempts++;
            }
        }
        gpa = gpa/numOfAttempts;
        JOptionPane.showMessageDialog(null, "Your CIS GPA is: " + String.format("%.2f", gpa), "CIS GPA", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_gpaViewCISGPAButtonActionPerformed

    private void gpaView10GPAButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gpaView10GPAButtonActionPerformed
        ArrayList<Attempt> transcript = student.getFullAttempts();
        Double gpa = 0.0;   
        int numOfAttempts = 0;
        for(int i = 0; i < transcript.size(); i++){
            if("Completed".equals(transcript.get(i).getStatus())){
                if(i < 11){
                    gpa += Double.parseDouble(transcript.get(i).getAttemptGrade());
                    numOfAttempts++;
                }
            }
        }
        gpa = gpa/numOfAttempts;
        JOptionPane.showMessageDialog(null, "Your 10 most recent GPA is: " + String.format("%.2f", gpa), "10 most recent GPA", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_gpaView10GPAButtonActionPerformed

    private void utilitiesSubmitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_utilitiesSubmitButtonActionPerformed
        double remainingCredits = 0;
        boolean completed = false;
        ArrayList<Course> data = student.getDegree().getRequiredCourses();
        ArrayList<String> courseList = new ArrayList<>();
        JFrame j = new JFrame();
        j.setLocationRelativeTo(null);
        j.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        switch(utilitiesOptionList.getSelectedIndex()){
            case 0:
                for(Course c : data){
                    if(student.findCourse(c.getCourseCode()) == null && student.findAttempt(c.getCourseCode()) == null){
                        ArrayList<Course> prereqs = c.getPrerequisites();
                        String prereqList = "";
                        for(int i = 0; i < prereqs.size(); i++){
                            prereqList += prereqs.get(i).getCourseCode();
                            if(i != prereqs.size() - 1){
                                prereqList += ":";
                            }
                        }
                        courseList.add((c.getCourseCode() + ", " + Double.toString(c.getCourseCredit()) + ", " + c.getCourseTitle() + ", " + c.getSemesterOffered() + ", " + prereqList));
                    }
                }
                
                j.setTitle("Course list");
                j.add(new JScrollPane(makeCourseJTable(courseList)));
                j.pack();
                j.setVisible(true);
                break;
            case 1:
                for(Course c : data){
                    if(student.findAttempt(c.getCourseCode()) == null){
                        ArrayList<Course> prereqs = c.getPrerequisites();
                        String prereqList = "";
                        for(int i = 0; i < prereqs.size(); i++){
                            prereqList += prereqs.get(i).getCourseCode();
                            if(i != prereqs.size() - 1){
                                prereqList += ":";
                            }
                        }
                        courseList.add((c.getCourseCode() + ", " + Double.toString(c.getCourseCredit()) + ", " + c.getCourseTitle() + ", " + c.getSemesterOffered() + ", " + prereqList));
                    }
                }
                j.setTitle("Course list");
                j.add(new JScrollPane(makeCourseJTable(courseList)));
                j.pack();
                j.setVisible(true);
                break;
            case 2:
                ArrayList<Course> option2data = new ArrayList<>();
                for(Course c : student.getFullPlanOfStudy()){
                    option2data.add(c);
                }
                for(Attempt a : student.getFullAttempts()){
                    option2data.add(a.getCourseAttempted());
                }
                remainingCredits = 0;
                completed = false;
                for (Course c : option2data) {
                    remainingCredits += c.getCourseCredit();
                }
                JOptionPane.showMessageDialog(null, "Your need to take " + String.format("%.1f", rqrdNumberOfCredits - remainingCredits) + " more credits", "Credits required to complete degree", JOptionPane.INFORMATION_MESSAGE);
                break;
            case 3:
                ArrayList<Course> option3data = new ArrayList<>();
                for(Course c : student.getFullPlanOfStudy()){
                    for(Course c1 : c.getPrerequisites()){
                        option3data.add(c1);
                    }
                }
                for(Course c : option3data){
                    ArrayList<Course> prereqs = c.getPrerequisites();
                    String prereqList = "";
                    for(int i = 0; i < prereqs.size(); i++){
                        prereqList += prereqs.get(i).getCourseCode();
                        if(i != prereqs.size() - 1){
                            prereqList += ":";
                        }
                    }
                    courseList.add((c.getCourseCode() + ", " + Double.toString(c.getCourseCredit()) + ", " + c.getCourseTitle() + ", " + c.getSemesterOffered() + ", " + prereqList));
                }
                j.setTitle("Prereq courses I need to take in plan of study");
                j.add(new JScrollPane(makeCourseJTable(courseList)));
                j.pack();
                j.setVisible(true);
                break;
            case 4:
                ArrayList<Attempt> option4data = student.getFullAttempts();
                ArrayList<String> option4data1 = new ArrayList<>();
                for(Course c : student.getDegree().listOfRequiredCourseCodes){
                    option4data1.add(c.getCourseCode());
                }
                for (Attempt a : option4data) {
                    if(a.getStatus().equals("Completed") && option4data1.contains(a.getCourseAttempted().getCourseCode())){
                        remainingCredits += a.getCourseAttempted().getCourseCredit();
                    }
                }
                JOptionPane.showMessageDialog(null, "Your have completed " + String.format("%.2f",  remainingCredits) + " credits completed in " + student.getDegree().title, "Credits required to complete degree", JOptionPane.INFORMATION_MESSAGE);
                break;
            case 5:
                ArrayList<Attempt> option5data = student.getFullAttempts();
                ArrayList<String> option5data1 = new ArrayList<>();
                for(Course c : student.getDegree().listOfRequiredCourseCodes){
                    option5data1.add(c.getCourseCode());
                }
                for (Attempt a : option5data) {
                    if(a.getStatus().equals("Completed") && option5data1.contains(a.getCourseAttempted().getCourseCode())){
                        remainingCredits += a.getCourseAttempted().getCourseCredit();
                    }
                }
                JOptionPane.showMessageDialog(null, "Your have " + String.format("%.2f",  rqrdNumberOfCredits - remainingCredits) + " credits remaining in " + student.getDegree().title, "Credits remaining to complete degree", JOptionPane.INFORMATION_MESSAGE);
                break;
            case 6:
                ArrayList<Course> option6data = new ArrayList<>();
                for(Course c : student.getFullPlanOfStudy()){
                    option6data.add(c);
                }
                for(Attempt a : student.getFullAttempts()){
                    option6data.add(a.getCourseAttempted());
                }
                if(student.getDegree().meetsRequirements(option6data)){
                    JOptionPane.showMessageDialog(null, "You meet the requirements to graduate " + student.getDegree().title, "Requirements to complete degree", JOptionPane.INFORMATION_MESSAGE);
                }
                else{
                    JOptionPane.showMessageDialog(null, "You don't meet the requirements to graduate " + student.getDegree().title, "Requirements to complete degree", JOptionPane.INFORMATION_MESSAGE);
                }
                break;
            default:
                System.out.println("Error in utilitiesSubmitButtonActionPerformed; utilitiesOptionList.getselectedIndex() has no code to run");
                break;
        }
    }//GEN-LAST:event_utilitiesSubmitButtonActionPerformed

    //initialize bcg degree
    private BCG initBCG(){
        BCG bcg = new BCG();
        ArrayList<Course> reqList = new ArrayList<>();
        String[] courses = bcgReq.split(",");
        for(String s : courses){
            reqList.add(cc.findCourse(s));
        }
        bcg.setRequiredCourses(reqList);
        return bcg;
    }
    
    //initialize cs degree
    private CS initCS(){
        CS cs = new CS();
        ArrayList<Course> reqList = new ArrayList<>();
        String[] courses = csReq.split(",");
        for(String s : courses){
            reqList.add(cc.findCourse(s));
        }
        cs.setRequiredCourses(reqList);
        return cs;
    }
    
    //initialize seng degree
    private SEng initSENG(){
        SEng seng = new SEng();
        ArrayList<Course> reqList = new ArrayList<>();
        String[] courses = sengReq.split(",");
        for(String s : courses){
            reqList.add(cc.findCourse(s));
        }
        seng.setRequiredCourses(reqList);
        return seng;
    }
    
    //returns a jtable of courses
    public JTable makeCourseJTable(ArrayList<String> list){
        String[] columnNames = {"Code", "Credit", "Name", "Semester", "Prereq"};
        String[][] data = new String[list.size() + 1][5];
        int i = 0;
        try{
            for(String s : list){
                String[] stuff = s.split(",");
                if(stuff.length == 4){
                    String[] temp = new String[5];
                    System.arraycopy(stuff, 0, temp, 0, stuff.length);
                    data[i] = temp;
                }
                else{
                    data[i] = stuff;
                }
                i++;
            }
        }
        catch(Exception e){
            updateTextArea("Error displaying table\n");
        }
        return new JTable(data, columnNames);
    }
    
    //returns a jtable of transcripts
    public JTable makeStudentJTable(ArrayList<String> list){
        String[] columnNames = {"Course", "Semester", "Grade", "Status"};
        String[][] data = new String[list.size() + 1][5];
        int i = 0;
        try{
            for(String s : list){
                String[] stuff = s.split(",");
                data[i] = stuff;
                i++;
            }
        }
        catch(Exception e){
            updateTextArea("Error displaying table\n");
        }
        return new JTable(data, columnNames);
    }
    
    //update text area for admin
    private void updateTextArea(String s){
        textArea.setText(s + textArea.getText());
        textArea.setCaretPosition(0);
    }
    
    //gets login from user. if not in database, create new student
    private void logInCheck(){
        if(!loggedIn){
            JTextField id = new JTextField("");
            JTextField name = new JTextField("");
            Object[] message = {"ID: ", id,
                "Name: ", name,};
            do{
                int option = JOptionPane.showConfirmDialog(null, message, "Log in", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
                if(option == JOptionPane.CANCEL_OPTION){
                    break;
                }
                else if(id.getText().isEmpty() || name.getText().isEmpty()){
                    JOptionPane.showMessageDialog(null, "Invalid login", "Warning", JOptionPane.WARNING_MESSAGE);
                }
            }
            while((id.getText().isEmpty() || name.getText().isEmpty()));
            DBStudent dbs = c.loadStudent(id.getText(), name.getText());
            ArrayList<String> k = dbs.getCourses();
            studentInfoName.setText(name.getText());
            studentInfoID.setText(id.getText());
            newStudent();
            if("BCG".equals(dbs.getDegree())){
                studentInfoDegree.setText("Bachelor of Computing: General Degree");
                studentInfoMajor.setText("BCG");
                Degree bcg = initBCG();
                bcg.setDegreeTitle("BCG");
                student.setDegree(bcg);
            }
            else if("CS".equals(dbs.getDegree())){
                studentInfoDegree.setText("Bachelor of Computing: Honours Degree");
                studentInfoMajor.setText("CS");
                Degree cs = initCS();
                cs.setDegreeTitle("CS");
                student.setDegree(cs);
            }
            else if("SENG".equals(dbs.getDegree())){
                studentInfoDegree.setText("Bachelor of Computing: Honours Degree");
                studentInfoMajor.setText("SENG");
                Degree seng = initSENG();
                seng.setDegreeTitle("SENG");
                student.setDegree(seng);
            }
            else{
                studentInfoMajor.setText("");
            }
            setPlanOfStudyAndTranscript();
            loggedIn = true;
        }
    }
    
    //creates new student and load data
    public void newStudent(){
        Student s = new Student();
        
        try{
            String[] name = studentInfoName.getText().split(" ");
            if(name.length != 1){
                s.setLastName(name[1]);
            }
            s.setFirstName(name[0]);
            s.setStudentNumber(Integer.parseInt(studentInfoID.getText()));
            this.student = s;
        }
        catch(java.lang.NumberFormatException e){
            loggedIn = false;
            System.out.println("Error: Student Number not Integer");
        }
        catch(Exception e){
            System.out.println(e);
        }
    }
    
    //upload pos and transcript to database
    public void setPlanOfStudyAndTranscript(){
        DBStudent s = c.loadStudent(student.getStudentNumber().toString(), student.getFullName());
        ArrayList<String> data = s.getCourses();
        for(String str : data){
            String[] parts = str.split(",");
            char sem = parts[1].charAt(0);
            if('0' == sem){
                Course tempCourse = new Course();
                tempCourse.setCourseCode(parts[0]);
                tempCourse.setCourseCredit(Double.parseDouble(parts[1]));
                tempCourse.setCourseTitle(parts[2]);
                tempCourse.setSemesterOffered(parts[3]);
                ArrayList<Course> prereqs = new ArrayList<>();
                if(parts.length == 5){
                    String[] prereqList = parts[4].split(":");
                    for(String string : prereqList){
                        prereqs.add(cc.findCourse(string));
                    }
                }
                tempCourse.setPrerequisites(prereqs);
                student.addCourse(tempCourse);
            }
        }
        for(String str : data){
            String[] parts = str.split(",");
            char sem = parts[1].charAt(0);
            if('F' == sem || 'W' == sem || 'F' == sem){
                Attempt tempAttempt = new Attempt();
                tempAttempt.setCourseAttempted(student.findCourse(parts[0]));
                tempAttempt.setSemesterTaken(parts[1]);
                tempAttempt.setAttemptGrade(parts[2]);
                tempAttempt.setStatus(parts[3]);
                student.addAttempt(tempAttempt);
            }            
        }        
    }
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Planner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Planner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Planner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Planner.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Planner().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCourseButton;
    private javax.swing.JButton addDegreeButton;
    private javax.swing.JPanel adminPanel;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JPanel courseButtonPanel;
    private javax.swing.JLabel courseCodeInfo;
    private javax.swing.JLabel courseCodeInfoLabel;
    private javax.swing.JLabel courseCreditInfo;
    private javax.swing.JLabel courseCreditInfoLabel;
    private javax.swing.JComboBox<String> courseInfoList;
    private javax.swing.JPanel courseInfoPanel;
    private javax.swing.JPanel courseInfoPanel1;
    private javax.swing.JPanel coursePrereqInfoPanel;
    private javax.swing.JTextPane coursePrereqListInfo;
    private javax.swing.JLabel courseSemesterOfferedInfo;
    private javax.swing.JLabel courseSemesterOfferedInfoLabel;
    private javax.swing.JLabel courseTitleInfo;
    private javax.swing.JLabel courseTitleInfoLabel;
    private javax.swing.JPanel degreeButtonPanel;
    private javax.swing.JButton editCourseButton;
    private javax.swing.JButton editDegreeButton;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JButton gpaView10GPAButton;
    private javax.swing.JButton gpaViewCISGPAButton;
    private javax.swing.JButton gpaViewOverallGPAButton;
    private javax.swing.JButton initCourseButton;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JButton logClearButton;
    private javax.swing.JPanel logPanel;
    private javax.swing.JScrollPane logScrollPane;
    private javax.swing.JButton posAddCourseButton;
    private javax.swing.JButton posRemoveCourseButton;
    private javax.swing.JButton posViewMyPOSButton;
    private javax.swing.JPanel readmePanel;
    private javax.swing.JButton removeCourseButton;
    private javax.swing.JButton removeDegreeButton;
    private javax.swing.JButton searchCourseInfoButton;
    private javax.swing.JPanel serachCourseInfoPanel;
    private javax.swing.JButton studentChangeAccountButton;
    private javax.swing.JPanel studentGPAPanel;
    private javax.swing.JLabel studentInfoDegree;
    private javax.swing.JLabel studentInfoDegreeLabel;
    private javax.swing.JLabel studentInfoID;
    private javax.swing.JLabel studentInfoIDLabel;
    private javax.swing.JLabel studentInfoMajor;
    private javax.swing.JLabel studentInfoMajorLabel;
    private javax.swing.JLabel studentInfoName;
    private javax.swing.JLabel studentInfoNameLabel;
    private javax.swing.JPanel studentInfoPanel;
    private javax.swing.JPanel studentPOSPanel;
    private javax.swing.JButton studentSavePOSAndTranscriptButton;
    private javax.swing.JPanel studentSavePanel;
    private javax.swing.JButton studentSelectDegreeButton;
    private javax.swing.JButton studentSelectMajorButton;
    private javax.swing.JPanel studentStudentPanel;
    private javax.swing.JPanel studentTranscriptPanel;
    private javax.swing.JPanel studentUtilitiesPanel;
    private javax.swing.JTextPane textArea;
    private javax.swing.JButton transcriptAddCourseButton;
    private javax.swing.JButton transcriptChangeGradeButton;
    private javax.swing.JButton transcriptRemoveCourseButton;
    private javax.swing.JButton transcriptViewTranscriptButton;
    private javax.swing.JPanel userPanel;
    private javax.swing.JComboBox<String> utilitiesOptionList;
    private javax.swing.JButton utilitiesSubmitButton;
    private javax.swing.JButton viewCourseButton;
    private javax.swing.JButton viewDegreeButton;
    // End of variables declaration//GEN-END:variables
}